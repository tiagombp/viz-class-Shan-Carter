plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??
textfont = list(
family = "Roboto Condensed, Source Sans Pro, Arial Narrow",
color = "black",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow"
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??
textfont = list(
family = "Roboto Condensed, Source Sans Pro, Arial Narrow",
color = "#444444",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow"
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
View(des)
View(rec)
p(matriz)
"I should exercise more."
1+1
1==2
1:100
animals<- c("bears","monkeys","donkeys")
class(animals)
class(1==2)
class(1:100)
prices <- read.csv("subscription-prices.csv")
pwd()
wd()
pwd
setwd('C:/Users/tiago.pereira/GitHub/shan-carter-class/bar-chart')
prices <- read.csv("subscription-prices.csv")
class(prices)
dim(prices)
head(prices)
head(prices, n=20)
names(prices)
prices$X2013
prices$X2013[1:10]
class(prices$X2013)
?head
prices[1,]
prices[,1]
prices[,c("Netword")]
prices[,c("Network")]
prices[,"Network"]
prices[1:10,c("Network")]
plot(prices$X2013)
View(prices)
hist(prices$X2013)
prices <- prices[order(prices$X2013, decreasing = T),]
plot(prices$X2013)
barplot(prices$X2013)
barplot(prices$X2013, col="lightgrey", main="Total control!", ylab="Price")
barplot(prices$X2013, col="lightgrey", border=F, main="Total control!", ylab="Price")
barplot(prices$X2013, col="grey", border=F, main="Total control!", ylab="Price")
prices <- prices[order(prices$X2013),]
barcolors <- ifelse(prices$Network == "ESPN", "red", "lightgrey")
barplot(prices$X2013, col=barcolors, border=F, main="Now with custom colors!", ylab="Price")
library(plotly)
plot_ly(z = ~volcano)
txhousing
str(txhousing)
p <- ggplot(txhousing, aes(date, median))
p
p <- ggplot(txhousing, aes(date, median))+
geom_line(aes(group = city), alpha = 0.2)
p
p <- ggplot(txhousing, aes(date, median))+
geom_line(alpha = 0.2)
p
# txhousing
# str(txhousing)
p <- ggplot(txhousing, aes(date, median))+
geom_line(aes(group = city), alpha = 0.2)
p
# txhousing
# str(txhousing)
p <- ggplot(txhousing, aes(date, median))+
geom_line(aes(group = city), alpha = 0.2)
p
view(txhousing)
View(txhousing)
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??,
valueformat = "R=-$.3r"
textfont = list(
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??,
valueformat = "R=-$.3r",
textfont = list(
family = "Roboto Condensed, Source Sans Pro, Arial Narrow",
color = "#444444",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow"
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??,
valueformat = "R>-$.3~r",
textfont = list(
family = "Roboto Condensed, Source Sans Pro, Arial Narrow",
color = "#444444",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow"
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??,
valueformat = "R$>-.3~r",
textfont = list(
family = "Roboto Condensed, Source Sans Pro, Arial Narrow",
color = "#444444",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow"
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??,
valueformat = ">-.3~f",
textfont = list(
family = "Roboto Condensed, Source Sans Pro, Arial Narrow",
color = "#444444",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow"
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??,
valueformat = ">-.3~g",
valuesuffix = " bilhões de reais",
textfont = list(
family = "Roboto Condensed, Source Sans Pro, Arial Narrow",
color = "#444444",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow"
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??#,
#valueformat = ">-.3~g",
#valuesuffix = " bilhões de reais",
textfont = list(
family = "Roboto Condensed, Source Sans Pro, Arial Narrow",
color = "#444444",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 10
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Source Sans Pro, Arial Narrow",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
library(plotly)
p <- function(dados){
plot_ly(
type = "sankey",
orientation = "h",
opacity = 0.6, # será q isso controla a opacidade dos hovers??#,
#valueformat = ">-.3~g",
#valuesuffix = " bilhões de reais",
textfont = list(
family = "Roboto Condensed, Arial Narrow, Source Sans Pro",
color = "#444444",
size = 12
),
node = list(
label = rotulos,
color = cores_nos,
pad = 10,
thickness = 25,
line = list(
color = "",
width = 0
)
),
hoverlabel = list(
font = list(
family = "Roboto Condensed Light, Arial Narrow, Source Sans Pro",
size = 10
)
),
link = list(
source = dados$nos_rec,
target = dados$nos_desp,
value =  dados$ramo,
color = dados$cores_ramos
#color =  "rgba(255,213,0,0.4)" # o pulo do gato! para deixar a cor translucida, é preciso usar rgba, e o último
# parâmetro é a opacidade
)
) %>%
layout(
title = "",
width = 700,
height = 800,
font = list(
family = "Roboto Condensed Light, Arial Narrow, Source Sans Pro",
size = 11,
color = "#004a93"
)
)
}
p(matriz)
Sys.getlocale()
View(des)
View(rec)
